{
	"info": {
		"_postman_id": "82638acd-92ca-4ab0-9577-55917ec1af2c",
		"name": "CRassist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40586760",
		"_collection_link": "https://hope44-0341.postman.co/workspace/hope-Workspace~a45872e2-dd49-4ef4-8fb2-d16a09487bf8/collection/38798527-82638acd-92ca-4ab0-9577-55917ec1af2c?action=share&source=collection_link&creator=40586760"
	},
	"item": [
		{
			"name": "Auth API",
			"item": [
				{
					"name": "http://localhost:5001/api/auth/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response).to.not.be.undefined;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    pm.expect(pm.response).to.not.be.undefined;\r",
									"    let jsonData;\r",
									"    try {\r",
									"        jsonData = pm.response.json();\r",
									"    } catch (e) {\r",
									"        jsonData = {};\r",
									"    }\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzU3YmZmNjNmNWUzZGJmMmRiMWViZSIsInVzbiI6IjIyQ1MxNDEiLCJyb2xlIjoic3R1ZGVudCIsIm5hbWUiOiJTb25hIiwiZW1haWwiOiJzb25hQGdtYWlsLmNvbSIsImlhdCI6MTc0ODMzOTc5MSwiZXhwIjoxNzQ4MzQzMzkxfQ.OlXrSkYdGiTpvQMSJVclv841Un5r6mRJBv2oGzkD_6c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usn\":\"22CS131\",\r\n    \"dob\":\"2000-03-03\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code 201\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check response is JSON\r",
									"pm.test(\"Response is JSON\", () => {\r",
									"  pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Check response has 'message' and 'user'\r",
									"pm.test(\"Response has required properties\", () => {\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.have.property(\"message\");\r",
									"  pm.expect(jsonData).to.have.property(\"user\");\r",
									"});\r",
									"\r",
									"// Check user object has 'usn' and 'role'\r",
									"pm.test(\"User object has required properties\", () => {\r",
									"  const user = pm.response.json().user;\r",
									"  pm.expect(user).to.have.property(\"usn\");\r",
									"  pm.expect(user).to.have.property(\"role\");\r",
									"});\r",
									"\r",
									"// Check types of user properties\r",
									"pm.test(\"User properties have correct types\", () => {\r",
									"  const user = pm.response.json().user;\r",
									"  pm.expect(user.usn).to.be.a(\"string\");\r",
									"  pm.expect(user.role).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Doe\",\r\n  \"email\": \"doe@gmail.com\",\r\n  \"usn\": \"22CS002\",\r\n  \"dob\": \"2003-04-15\",\r\n  \"role\": \"student\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/announcements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains title and content\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"title\");",
									"  pm.expect(res).to.have.property(\"content\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"_id\": \"6835c9627cb614ed5a5d2086\",\n        \"title\": \"Quiz\",\n        \"content\": \"PPt \",\n        \"fileUrl\": \"/uploads/1748355426103.pdf\",\n        \"user\": {\n            \"_id\": \"6835c6737cb614ed5a5d207d\",\n            \"name\": \"Rifah\",\n            \"role\": \"cr\"\n        },\n        \"date\": \"2025-05-27T14:17:06.146Z\",\n        \"__v\": 0\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/announcements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"announcements"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Feedback deleted\", () => {",
									"  pm.response.to.have.status(200);",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\", \"Deleted\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/feedback/6835ca027cb614ed5a5d20b8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback",
								"6835ca027cb614ed5a5d20b8"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Check status code",
									"pm.test(\"Status code is 201 (Created)\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Check response is JSON",
									"pm.test(\"Response is in JSON format\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 3. Check response contains success message",
									"pm.test(\"Response contains message\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\", \"Issue submitted successfully\");",
									"});",
									"",
									"// 4. Ensure response doesn't contain unexpected errors",
									"pm.test(\"No unexpected errors in response\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.not.have.property(\"error\");",
									"});",
									"",
									"// 5. Validate structure of response (if extended to return issue details)",
									"pm.test(\"Valid issue response schema (if applicable)\", function () {",
									"  const res = pm.response.json();",
									"  // Optional: check fields if issue is returned",
									"  // pm.expect(res.issue).to.have.property(\"title\");",
									"  // pm.expect(res.issue).to.have.property(\"description\");",
									"  // pm.expect(res.issue).to.have.property(\"usn\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Projector not working\",\n  \"description\": \"Projector in room 305 is broken again.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/issues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Issues fetched successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues are in array format\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.be.an(\"array\");",
									"  if (res.length > 0) {",
									"    pm.expect(res[0]).to.have.property(\"title\");",
									"    pm.expect(res[0]).to.have.property(\"description\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/issues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Check status code is 201 Created",
									"pm.test(\"Poll created successfully\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Check response is JSON",
									"pm.test(\"Response is in JSON format\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 3. Response contains 'question'",
									"pm.test(\"Response contains poll question\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"question\");",
									"});",
									"",
									"// 4. Response contains 'options' as an array",
									"pm.test(\"Response contains options array\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"options\");",
									"  pm.expect(res.options).to.be.an(\"array\");",
									"});",
									"",
									"// 5. Response contains _id and timestamp",
									"pm.test(\"Poll contains ID and date\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"_id\");",
									"  pm.expect(res).to.have.property(\"createdAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"question\": \"Should we have extra classes on Saturday?\",\n  \"options\": [\"Yes\", \"No\", \"Maybe\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/polls",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Polls fetched successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Polls contain questions and options\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.be.an(\"array\");",
									"  if (res.length > 0) {",
									"    pm.expect(res[0]).to.have.property(\"question\");",
									"    pm.expect(res[0].options).to.be.an(\"array\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/polls",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains 'message'\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\");",
									"  pm.expect(res.message).to.eql(\"Feedback submitted\");",
									"});",
									"",
									"pm.test(\"Response message is a string\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res.message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feedback\": \"The course content is really good, but a bit fast-paced.\",\n  \"usn\": \"22CS131\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/feedback",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Feedback updated\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated feedback structure\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"feedback\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feedback\": \"Updated feedback content.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/feedback/6835f31b7cb614ed5a5d2174",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback",
								"6835f31b7cb614ed5a5d2174"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/users/me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 202\", function () {",
									"    pm.response.to.have.status(200);",
									"    // or if you return 202 accepted, use:",
									"    // pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response message indicates account deletion\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Account deleted\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dob\": \"2000-09-09\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/users/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/users/me",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Profile updated successfully.\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"celine@gmail.com\",\n  \"dob\": \"2000-03-03\",\n  \"language\": \"English\",\n  \"darkMode\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/users/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/issues/6835c9a17cb614ed5a5d208e",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Issue deleted\", () => {",
									"  pm.response.to.have.status(200);",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\", \"Deleted\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/issues/6835c9a17cb614ed5a5d208e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues",
								"6835c9a17cb614ed5a5d208e"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/issues/6835c9a17cb614ed5a5d208e",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Issue updated successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated issue has correct structure\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"title\");",
									"  pm.expect(res).to.have.property(\"description\");",
									"  pm.expect(res).to.have.property(\"status\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzVkOWU0N2NiNjE0ZWQ1YTVkMjBlOSIsInVzbiI6IjIyQ1MxMzEiLCJyb2xlIjoiY3IiLCJuYW1lIjoiU2VsaW5lIiwiZW1haWwiOiJjZWxpbmVAZ21haWwuY29tIiwiaWF0IjoxNzQ4MzYzMTM5LCJleHAiOjE3NDgzNjY3Mzl9._owYn5-Ildbh950DqEdRB2vdiJ4VJjUXatE_wsQLlwM",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Issue Title\",\n  \"description\": \"Updated description\",\n  \"status\": \"resolved\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/issues/6835c9a17cb614ed5a5d208e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues",
								"6835c9a17cb614ed5a5d208e"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/announcements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status code is 200 OK",
									"pm.test(\"Announcements fetched successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Response is an array",
									"pm.test(\"Response is an array\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"// Test 3: Each announcement has required properties",
									"pm.test(\"Each announcement has id, title and message\", () => {",
									"  const res = pm.response.json();",
									"  if (res.length > 0) {",
									"    pm.expect(res[0]).to.have.property(\"_id\");",
									"    pm.expect(res[0]).to.have.property(\"title\");",
									"    pm.expect(res[0]).to.have.property(\"message\");",
									"  }",
									"});",
									"",
									"// Test 4: Response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Test 5: Response content-type is JSON",
									"pm.test(\"Content-Type is application/json\", () => {",
									"  pm.response.to.have.header(\"Content-Type\", /application\\/json/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/announcements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"announcements"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}