{
	"info": {
		"_postman_id": "eca2aa57-df2c-4fed-8429-b04359e26aa8",
		"name": "CRassistCopy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40586760",
		"_collection_link": "https://hope44-0341.postman.co/workspace/hope-Workspace~a45872e2-dd49-4ef4-8fb2-d16a09487bf8/collection/40586760-eca2aa57-df2c-4fed-8429-b04359e26aa8?action=share&source=collection_link&creator=40586760"
	},
	"item": [
		{
			"name": "Auth API",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData;\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    try {\r",
									"        jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.be.an(\"object\");\r",
									"    } catch (e) {\r",
									"        console.error(\"❌ Response is not JSON. Got:\", pm.response.text());\r",
									"        pm.expect.fail(\"Response is not valid JSON.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Proceed only if JSON is parsed\r",
									"if (jsonData) {\r",
									"    const statusCode = pm.response.code;\r",
									"\r",
									"    if (statusCode === 400) {\r",
									"        // ❌ Validation error (Bad Request)\r",
									"        pm.test(\"Status code is 400\", function () {\r",
									"            pm.expect(statusCode).to.eql(400);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Error response has 'error.message'\", function () {\r",
									"            pm.expect(jsonData).to.have.property(\"error\");\r",
									"            pm.expect(jsonData.error).to.have.property(\"message\");\r",
									"            pm.expect(jsonData.error.message).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"    } else if (statusCode === 201) {\r",
									"        // ✅ Success\r",
									"        pm.test(\"Status code is 201\", function () {\r",
									"            pm.expect(statusCode).to.eql(201);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Response has 'message' and 'user'\", function () {\r",
									"            pm.expect(jsonData).to.have.property(\"message\");\r",
									"            pm.expect(jsonData).to.have.property(\"user\");\r",
									"        });\r",
									"\r",
									"        const user = jsonData.user;\r",
									"\r",
									"        pm.test(\"User object has required properties\", function () {\r",
									"            pm.expect(user).to.have.property(\"usn\");\r",
									"            pm.expect(user).to.have.property(\"role\");\r",
									"        });\r",
									"\r",
									"        pm.test(\"User properties have correct types\", function () {\r",
									"            pm.expect(user.usn).to.be.a(\"string\");\r",
									"            pm.expect(user.role).to.be.a(\"string\");\r",
									"        });\r",
									"\r",
									"    } else {\r",
									"        // 🚫 Unexpected status\r",
									"        pm.test(\"Unexpected status code\", function () {\r",
									"            pm.expect.fail(`Unexpected status code ${statusCode}`);\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ts = Date.now();  // current timestamp in milliseconds",
									"",
									"pm.collectionVariables.set(\"uniqueUSN\", `22CS${ts}`);",
									"pm.collectionVariables.set(\"uniqueEmail\", `test${ts}@example.com`);",
									"pm.collectionVariables.set(\"dob\", \"2004-04-03\");  // or whatever DOB you want",
									"",
									"",
									"pm.collectionVariables.set(\"testPassword\", \"password123\");  // or whatever was used",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \" Doe\",\r\n  \"usn\": \"{{uniqueUSN}}\",\r\n  \"email\": \"{{uniqueEmail}}\",\r\n  \"dob\": \"{{dob}}\",\r\n  \"password\": \"password123\",\r\n  \"role\": \"cr\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/auth/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"uniqueUSN:\", pm.variables.get(\"uniqueUSN\"));",
									"console.log(\"dob:\", pm.variables.get(\"dob\"));",
									"console.log(\"testPassword:\", pm.variables.get(\"testPassword\"));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = {};\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    jsonData = {};\r",
									"    console.warn(\"Response is not a valid JSON\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains token\", () => {\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"\r",
									"    if (jsonData.token) {\r",
									"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
									"        console.log(\"authToken set successfully:\", jsonData.token);\r",
									"    } else {\r",
									"        console.warn(\"No token found to set.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzU3YmZmNjNmNWUzZGJmMmRiMWViZSIsInVzbiI6IjIyQ1MxNDEiLCJyb2xlIjoic3R1ZGVudCIsIm5hbWUiOiJTb25hIiwiZW1haWwiOiJzb25hQGdtYWlsLmNvbSIsImlhdCI6MTc0ODMzOTc5MSwiZXhwIjoxNzQ4MzQzMzkxfQ.OlXrSkYdGiTpvQMSJVclv841Un5r6mRJBv2oGzkD_6c",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"usn\": \"{{uniqueUSN}}\",\r\n  \"dob\": \"{{dob}}\",\r\n  \"password\": \"{{testPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/announcements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"const ts = Date.now();",
									"pm.collectionVariables.set(\"uniqueUSN\", `22CS${ts}`);",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const ts = Date.now();",
									"pm.collectionVariables.set(\"uniqueUSN\", `22CS${ts}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Midterm Exam Schedule\",\n    \"content\": \"The midterm exams will be held from June 10 to June 15. Please check the schedule on the portal.\",\n    \"fileUrl\": \"/uploads/exam_schedule.pdf\",\n    \"user\": {\n        \"_id\": \"6835c6737cb614ed5a5d2090\",\n        \"usn\":\"{{uniqueUSN}}\",\n        \"name\": \"Alex\",\n        \"role\": \"cr\"\n    },\n    \"date\": \"2025-06-05T10:00:00.000Z\",\n    \"__v\": 0\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/announcements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"announcements"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/announcements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Announcements fetched successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each announcement has _id, title and content\", () => {",
									"  const res = pm.response.json();",
									"  if (res.length > 0) {",
									"    pm.expect(res[0]).to.have.property(\"_id\");",
									"    pm.expect(res[0]).to.have.property(\"title\");",
									"    pm.expect(res[0]).to.have.property(\"content\");  // corrected here",
									"  }",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/api/announcements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"announcements"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Check status code",
									"pm.test(\"Status code is 201 (Created)\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Check response is JSON",
									"pm.test(\"Response is in JSON format\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 3. Check response contains success message",
									"pm.test(\"Response contains message\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\", \"Issue submitted successfully\");",
									"});",
									"",
									"// 4. Ensure response doesn't contain unexpected errors",
									"pm.test(\"No unexpected errors in response\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.not.have.property(\"error\");",
									"});",
									"",
									"// 5. Validate structure of response (if extended to return issue details)",
									"pm.test(\"Valid issue response schema (if applicable)\", function () {",
									"  const res = pm.response.json();",
									"  // Optional: check fields if issue is returned",
									"  // pm.expect(res.issue).to.have.property(\"title\");",
									"  // pm.expect(res.issue).to.have.property(\"description\");",
									"  // pm.expect(res.issue).to.have.property(\"usn\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Projector not working\",\n  \"description\": \"Projector in room 305 is broken again.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/issues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Issues fetched successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Issues are in array format\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.be.an(\"array\");",
									"  if (res.length > 0) {",
									"    pm.expect(res[0]).to.have.property(\"title\");",
									"    pm.expect(res[0]).to.have.property(\"description\");",
									"  }",
									"",
									"var jsonData = pm.response.json();",
									"if (Array.isArray(jsonData) && jsonData.length > 0) {",
									"    pm.collectionVariables.set(\"issueId\", jsonData[0]._id);",
									"}",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/issues",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/issues/6835c9a17cb614ed5a5d208e",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;",
									"let jsonData;",
									"",
									"try {",
									"    jsonData = pm.response.json();",
									"} catch (e) {",
									"    pm.expect.fail(\"Response is not valid JSON\");",
									"}",
									"",
									"if (statusCode === 200) {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.expect(statusCode).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response has success message\", function () {",
									"        pm.expect(jsonData).to.have.property(\"message\", \"Profile updated successfully.\");",
									"    });",
									"",
									"    pm.test(\"Response time is less than 500ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(500);",
									"    });",
									"",
									"    pm.test(\"Updated issue has correct structure\", function () {",
									"        pm.expect(jsonData).to.have.property(\"title\");",
									"        // Add other properties checks as needed",
									"    });",
									"",
									"} else if (statusCode === 404) {",
									"    pm.test(\"Status code is 404 - Not Found\", function () {",
									"        pm.expect(statusCode).to.eql(404);",
									"    });",
									"",
									"    pm.test(\"Response has 'Not found' message\", function () {",
									"        pm.expect(jsonData).to.have.property(\"message\", \"Not found\");",
									"    });",
									"",
									"} else {",
									"    pm.test(\"Unexpected status code\", function () {",
									"        pm.expect.fail(`Unexpected status code: ${statusCode}`);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Issue Title\",\n  \"description\": \"Updated description\",\n  \"status\": \"resolved\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/issues/{{issueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues",
								"{{issueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/issues/6835c9a17cb614ed5a5d208e",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Issue deleted\", () => {",
									"  pm.response.to.have.status(200);",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\", \"Deleted\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/issues/{{issueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"issues",
								"{{issueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Check status code is 201 Created",
									"pm.test(\"Poll created successfully\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Check response is JSON",
									"pm.test(\"Response is in JSON format\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 3. Response contains 'question'",
									"pm.test(\"Response contains poll question\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"question\");",
									"});",
									"",
									"// 4. Response contains 'options' as an array",
									"pm.test(\"Response contains options array\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"options\");",
									"  pm.expect(res.options).to.be.an(\"array\");",
									"});",
									"",
									"// 5. Response contains _id and timestamp",
									"pm.test(\"Poll contains ID and date\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"_id\");",
									"  pm.expect(res).to.have.property(\"createdAt\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"question\": \"Should we have extra classes on Saturday?\",\n  \"options\": [\"Yes\", \"No\", \"Maybe\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/polls",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Polls fetched successfully\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Polls contain questions and options\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.be.an(\"array\");",
									"  if (res.length > 0) {",
									"    pm.expect(res[0]).to.have.property(\"question\");",
									"    pm.expect(res[0].options).to.be.an(\"array\");",
									"  }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/polls",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains 'message'\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\");",
									"  pm.expect(res.message).to.eql(\"Feedback submitted\");",
									"});",
									"",
									"pm.test(\"Response message is a string\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res.message).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feedback\": \"The course content is really good, but a bit fast-paced.\",\n  \"usn\": \"22CS131\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/feedback",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let statusCode = pm.response.code;",
									"let jsonData;",
									"",
									"try {",
									"    jsonData = pm.response.json();",
									"} catch (e) {",
									"    pm.expect.fail(\"Response is not valid JSON\");",
									"}",
									"",
									"if (statusCode === 200) {",
									"    pm.test(\"Status code is 200 OK\", () => {",
									"        pm.expect(statusCode).to.eql(200);",
									"    });",
									"",
									"    pm.test(\"Response is an array\", () => {",
									"        pm.expect(jsonData).to.be.an(\"array\");",
									"    });",
									"",
									"    pm.test(\"At least one feedback exists\", () => {",
									"        pm.expect(jsonData.length).to.be.above(0);",
									"    });",
									"",
									"    if (Array.isArray(jsonData) && jsonData.length > 0) {",
									"        pm.collectionVariables.set(\"feedbackId\", jsonData[0]._id);",
									"        pm.test(\"Saved feedbackId variable\", () => {",
									"            pm.expect(pm.collectionVariables.get(\"feedbackId\")).to.eql(jsonData[0]._id);",
									"        });",
									"    }",
									"",
									"} else if (statusCode === 403) {",
									"    pm.test(\"Status code is 403 Forbidden\", () => {",
									"        pm.expect(statusCode).to.eql(403);",
									"    });",
									"",
									"    pm.test(\"Response contains 'message' property\", () => {",
									"        pm.expect(jsonData).to.have.property(\"message\");",
									"        pm.expect(jsonData.message).to.eql(\"Forbidden\");",
									"    });",
									"",
									"} else {",
									"    pm.test(\"Unexpected status code\", () => {",
									"        pm.expect.fail(`Unexpected status code: ${statusCode}`);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5001/api/feedback",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = pm.response.code;",
									"let res;",
									"",
									"try {",
									"  res = pm.response.json();",
									"} catch (e) {",
									"  pm.test(\"Response is valid JSON\", () => {",
									"    pm.expect.fail(\"Response is not valid JSON\");",
									"  });",
									"}",
									"",
									"if (statusCode === 200) {",
									"  pm.test(\"Status code is 200 - Feedback updated\", () => {",
									"    pm.expect(statusCode).to.eql(200);",
									"  });",
									"",
									"  pm.test(\"Response contains 'feedback' property\", () => {",
									"    pm.expect(res).to.have.property(\"feedback\");",
									"  });",
									"",
									"} else if (statusCode === 404) {",
									"  pm.test(\"Status code is 404 - Feedback not found\", () => {",
									"    pm.expect(statusCode).to.eql(404);",
									"  });",
									"",
									"  pm.test(\"Response contains 'message' property with value 'Not found'\", () => {",
									"    pm.expect(res).to.have.property(\"message\", \"Not found\");",
									"  });",
									"",
									"} else {",
									"  pm.test(\"Unexpected status code\", () => {",
									"    pm.expect.fail(`Unexpected status code: ${statusCode}`);",
									"  });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Using feedbackId in PUT:\", pm.collectionVariables.get(\"feedbackId\"));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feedback\": \"Updated feedback content.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/feedback/{{feedbackId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback",
								"{{feedbackId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Feedback deleted\", () => {",
									"  pm.response.to.have.status(200);",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"message\", \"Deleted\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/feedback/{{feedbackId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"feedback",
								"{{feedbackId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5001/api/users/me",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Profile updated successfully.\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"dudu22{{$timestamp}}@gmail.com\",\n  \"dob\": \"2000-03-04\",\n  \"language\": \"English\",\n  \"darkMode\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/api/users/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testEmail",
			"value": "userexample.com",
			"type": "string"
		},
		{
			"key": "testPassword",
			"value": "2000-04-04",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "issueId",
			"value": "",
			"type": "string"
		},
		{
			"key": "feedbackId",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "testUSN",
			"value": ""
		},
		{
			"key": "uniqueUSN",
			"value": ""
		},
		{
			"key": "uniqueEmail",
			"value": ""
		},
		{
			"key": "dob",
			"value": ""
		}
	]
}